#include <bits/stdc++.h>
using namespace std;
using namespace std::chrono;
typedef long long ll;

#define rep(i, n) for (ll i = 0; i < n; i++)
#define all(x) x.begin(), x.end()
#define pb push_back
#define mod 1000000007

long long int fact[1000001];

//--------------------------------------------------------------
// 				   				       (n!)%mod
// To calculate -> C(n, r)%mod = -------------------------
//              		  	    (r!)%mod * ((n - r)!)%mod
//--------------------------------------------------------------

long long int power(long long int a, long long int b)
{
    int res = 1;
    while (b)
    {
        if (b & 1)
            res = (res * a) % mod;
        a = (a * a) % mod;
        b /= 2;
    }
    return res;
}

int Coeff(int n, int r)
{
    if (r > n)
        return 0;

    int res = fact[n];

    // From Fermat's Little Theorem
    // (1/a) = a^(m - 2) (mod m)

    res = (res * power(fact[r], mod - 2)) % mod;
    res = (res * power(fact[n - r], mod - 2)) % mod;

    return res;
}

void solve()
{
    int n, r;
    cin >> n >> r;
    // Storing all the factorials of
    // numbers till 1e6 modulo.[fact[n] = (n!)%mod]
    cout << Coeff(n, r) << '\n';
}

int main()
{

    int t;

    fact[0] = fact[1] = 1;
    for (int i = 2; i <= 1000000; i++)
        fact[i] = (fact[i - 1] * 1LL * i) % mod;
    cin >> t;
    while (t--)
        solve();
    return 0;
}
